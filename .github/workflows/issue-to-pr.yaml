name: Issue Submission to Pull Request
on:
  issues:
    types:
      [opened, edited]

jobs:
  submit-provider:
    if: contains(github.event.issue.labels.*.name, 'provider') && contains(github.event.issue.labels.*.name, 'submission')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './src/go.mod'

      - name: Validate Provider and Create PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          NUMBER: ${{ github.event.issue.number }}
          URL: ${{ github.event.issue.url }}
          TITLE: ${{ github.event.issue.title }}
          BODY: ${{ github.event.issue.body }}
        working-directory: ./src
        run: |
          set -euo pipefail

          if [[ -z "${BODY}" ]]; then
            echo "Please run this script from a GitHub Action."
            exit 1
          fi
          if [[ -z "${TITLE}" ]]; then
            echo "Please run this script from a GitHub Action."
            exit 1
          fi
          if [[ -z "${NUMBER}" ]]; then
            echo "Please run this script from a GitHub Action."
            exit 1
          fi

          repository=$(echo "${BODY}" | grep "### Provider Repository" -A2 | tail -n1 | tr "[:upper:]" "[:lower:]" | sed -e 's/[\r\n]//g')

          if [[ ! "${repository}" =~ ^[a-zA-Z0-9-]+/terraform-provider-[a-zA-Z0-9-]+$ ]]; then
            gh issue comment "${NUMBER}" -b "Failed validation: Invalid repository name: '${repository}'. Please submit the repository in the format of ORGANIZATION/terraform-provider-NAME."
            exit 1
          fi

          set +e
          if ! go run ./cmd/add-provider -repository="${repository}" -output=./output.json ; then
            set -euo pipefail
            if [[ "$(jq -r '.exists' < ./output.json || true)" == "true" ]]; then
              gh issue close "${NUMBER}" -c "$(jq -r '.validation' < ./output.json || true)"
              exit 0
            else
              gh issue comment "${NUMBER}" -b "$(jq -r '.validation' < ./output.json || true)"
              exit 1
            fi
          fi
          set -euo pipefail
          namespace=$(jq -r '.namespace' < ./output.json)
          name=$(jq -r '.name' < ./output.json)
          jsonfile=$(jq -r '.file' < ./output.json)


          # Create Branch
          branch="provider-submission_${namespace}_${name}"
          set +e
          if ! git checkout -b "${branch}"; then
            set -euo pipefail
            gh issue comment "${NUMBER}" -b "Failed validation: A branch already exists for this provider '${branch}'"
            exit 1
          fi
          set -euo pipefail

          # Add result
          git add "${jsonfile}"

          # Commit and push result
          git config --global user.email "no-reply@opentofu.org"
          git config --global user.name "OpenTofu Automation"
          git commit -s -m "Create provider ${namespace}/${name}"
          git push -u origin "${branch}"

          # Create pull request and update issue
          pr=$(gh pr create --title "${TITLE}" --body "Created ${jsonfile/../src/}) for provider ${namespace}/${name}.  Closes #${NUMBER}.") #--assignee opentofu/core-engineers)
          gh issue comment "${NUMBER}" -b "Your submission has been validated and has moved on to the pull request phase (${pr}).  This issue has been locked."
          gh issue lock "${NUMBER}" -r resolved
  submit-module:
    if: contains(github.event.issue.labels.*.name, 'module') && contains(github.event.issue.labels.*.name, 'submission')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './src/go.mod'

      - name: Validate Module and Create PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          NUMBER: ${{ github.event.issue.number }}
          URL: ${{ github.event.issue.url }}
          TITLE: ${{ github.event.issue.title }}
          BODY: ${{ github.event.issue.body }}
        working-directory: ./src
        run: |
          set -euo pipefail

          if [[ -z "${BODY}" ]]; then
            echo "Please run this script from a GitHub Action."
            exit 1
          fi
          if [[ -z "${TITLE}" ]]; then
            echo "Please run this script from a GitHub Action."
            exit 1
          fi
          if [[ -z "${NUMBER}" ]]; then
            echo "Please run this script from a GitHub Action."
            exit 1
          fi

          repository=$(echo "${BODY}" | grep "### Module Repository" -A2 | tail -n1 | tr "[:upper:]" "[:lower:]" | sed -e 's/[\r\n]//g')

          if [[ ! "${repository}" =~ ^[a-zA-Z0-9-]+/terraform-[a-zA-Z0-9-]+$ ]]; then
            gh issue comment "${NUMBER}" -b "Failed validation: Invalid repository name: '${repository}'. Please submit the repository in the format of ORGANIZATION/terraform-NAME-TARGETSYSTEM."
            exit 1
          fi

          set +e
          if ! go run ./cmd/add-module -repository="${repository}" -output=./output.json ; then
            set -euo pipefail
            if [[ "$(jq -r '.exists' < ./output.json || true)" == "true" ]]; then
              gh issue close "${NUMBER}" -c "$(jq -r '.validation' < ./output.json || true)"
              exit 0
            else
              gh issue comment "${NUMBER}" -b "$(jq -r '.validation' < ./output.json || true)"
              exit 1
            fi
          fi
          set -euo pipefail
          namespace=$(jq -r '.namespace' < ./output.json)
          name=$(jq -r '.name' < ./output.json)
          target=$(jq -r '.target' < ./output.json)
          jsonfile=$(jq -r '.file' < ./output.json)


          # Create Branch
          branch=module-submission_${namespace}_${name}_${target}
          set +e
          if ! git checkout -b "${branch}"; then
            set -euo pipefail
            gh issue comment "${NUMBER}" -b "Failed validation: A branch already exists for this module '${branch}'"
            exit 1
          fi
          set -euo pipefail

          # Add result
          git add "${jsonfile}"

          # Commit and push result
          git config --global user.email "no-reply@opentofu.org"
          git config --global user.name "OpenTofu Automation"
          git commit -s -m "Create module ${namespace}/${name}/${target}"
          git push -u origin "${branch}"

          # Create pull request and update issue
          pr=$(gh pr create --title "${TITLE}" --body "Created ${jsonfile/../src/} for module ${namespace}/${name}/${target}.  Closes #${NUMBER}.") #--assignee opentofu/core-engineers)
          gh issue comment "${NUMBER}" -b "Your submission has been validated and has moved on to the pull request phase (${pr}).  This issue has been locked."
          gh issue lock "${NUMBER}" -r resolved
  submit-provider-key:
    if: contains(github.event.issue.labels.*.name, 'provider-key') && contains(github.event.issue.labels.*.name, 'submission')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: './src/go.mod'

      - name: Validate Provider and Create PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          GH_USER: ${{ github.event.issue.user.login }}
          NUMBER: ${{ github.event.issue.number }}
          URL: ${{ github.event.issue.url }}
          TITLE: ${{ github.event.issue.title }}
          BODY: ${{ github.event.issue.body }}
        working-directory: ./src
        run: |
          set -euo pipefail

          if [[ -z "${BODY}" ]]; then
            echo "Please run this script from a GitHub Action."
            exit 1
          fi
          if [[ -z "${TITLE}" ]]; then
            echo "Please run this script from a GitHub Action."
            exit 1
          fi
          if [[ -z "${NUMBER}" ]]; then
            echo "Please run this script from a GitHub Action."
            exit 1
          fi
          if [[ -z "${GH_USER}" ]]; then
            echo "Please set GH_USER"
            exit 1
          fi

          namespace=$(echo "${BODY}" | grep "### Provider Namespace" -A2 | tail -n1 | tr "[:upper:]" "[:lower:]" | sed -e 's/[\r\n]//g')
          providername=$(echo "${BODY}" | grep "### Provider Name" -A2 | tail -n1 | tr "[:upper:]" "[:lower:]" | sed -e 's/[\r\n]//g')
          keydata=$(echo "${BODY}" | grep -A 1000 "BEGIN PGP PUBLIC KEY BLOCK"  | grep -B 1000 "END PGP PUBLIC KEY BLOCK")
          echo "${keydata}" > tmp.key

          if [[ ! "${namespace}" =~ ^[a-zA-Z0-9-]+$ ]]; then
            gh issue comment "${NUMBER}" -b "Failed validation: Invalid namespace: '${namespace}'"
            exit 1
          fi

          if [[ "${providername}" = "*No response*" ]]; then
            providername=""
          fi
          if [[ -n "${providername}" ]]; then
            if [[ ! "${providername}" =~ ^[a-zA-Z0-9-]+$ ]]; then
              gh issue comment "${NUMBER}" -b "Failed validation: Invalid provider name: '${providername}}'"
              exit 1
            fi
          fi

          set +e
          go run ./cmd/verify-gpg-key -org "${namespace}" -username "${GH_USER}" -key-file=tmp.key -output=./output.json
          verification=$?
          set -euo pipefail

          gh issue comment "${NUMBER}" -b "$(jq -r '.' < ./output.json || true)"
          if [[ "${verification}" != 0 ]]; then
            exit 1
          fi

          if [[ -z "${providername}" ]]; then
            keyfile="../keys/${namespace:0:1}/${namespace}/provider-$(date +%s).asc"
          else
            keyfile="../keys/${namespace:0:1}/${namespace}/${providername}/provider-$(date +%s).asc"
          fi
          if [[ -d "$(dirname "${keyfile}")" ]]; then
            msg=Updated
            #git rm $(dirname $keyfile)/*
          else
            msg=Created
          fi
          mkdir -p "$(dirname "${keyfile}")"
          mv tmp.key "${keyfile}"

          # Create Branch
          branch="provider-key-submission_${namespace}"
          set +e
          if ! git checkout -b "${branch}"; then
            gh issue comment "${NUMBER}" -b "Failed validation: A branch already exists for this provider '${branch}'"
            exit 1
          fi
          set -euo pipefail

          # Add result
          git add "${keyfile}"

          # Commit and push result
          git config --global user.email "no-reply@opentofu.org"
          git config --global user.name "OpenTofu Automation"
          if [[ -n "${providername}" ]]; then
            git commit -s -m "Create provider key ${namespace}/${providername}"
          else
            git commit -s -m "Create provider key ${namespace}"
          fi
          git push -u origin "${branch}"

          # Create pull request and update issue
          pr=$(gh pr create --title "${TITLE}" --body "${msg} ${keyfile/.././} for provider ${namespace}. Closes #${NUMBER}.") #--assignee opentofu/core-engineers)
          gh issue comment "${NUMBER}" -b "Your submission has been validated and has moved on to the pull request phase (${pr}).  This issue has been locked."
          gh issue lock "${NUMBER}" -r resolved